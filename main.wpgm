import wollok.game.*
import objects.*

program FulbotGame {
    game.title("Fulbot")
    game.boardGround("pitch.jpg")
    game.height(100) //tenemos un alto de 100 celdas (1000 pixeles).
    game.width(100) //tenemos un ancho de 100 celdas (1000 pixeles).
    game.cellSize(10) //tenemos celdas de 10x10 pixeles.

//SONIDOS

    const sonidoAmbiente = game.sound("sonidoAmbiente.mp3")
    sonidoAmbiente.shouldLoop(true)
    game.schedule(500, {
        sonidoAmbiente.play()
        keyboard.m().onPressDo({sonidoAmbiente.volume(50)})
        //keyboard.n().onPressDo({sonidoAmbiente.volume(50)}) Por alguna razon da EvaluationError al presionar 'n'...
    })

// TECLAS DE MOVIMIENTO

    keyboard.w().onPressDo({ jugador1.moverteArriba(5) })
    keyboard.a().onPressDo({ jugador1.moverteIzquierda(5) })
    keyboard.s().onPressDo({ jugador1.moverteAbajo(5) })
    keyboard.d().onPressDo({ jugador1.moverteDerecha(5) })

    keyboard.up().onPressDo({ jugador2.moverteArriba(5) })
    keyboard.left().onPressDo({ jugador2.moverteIzquierda(5) })
    keyboard.down().onPressDo({ jugador2.moverteAbajo(5) })
    keyboard.right().onPressDo({ jugador2.moverteDerecha(5) })

//OBJETOS


    const jugador1 = new Jugador( cansancio = 0, imagen = "argentino.png", position = new MutablePosition(x=50, y=10))
    const jugador2 = new Jugador( cansancio = 0, imagen = "brasilero.png", position = new MutablePosition(x=50, y=90))

	const gaseosa1 = new Consumible( energia = 30, imagen = "gaseosa.png")
    const gaseosa2 = new Consumible( energia = 30, imagen = "gaseosa.png")
    const comida = new Consumible( energia = 60, imagen = "food.png")
    const banana1 = new Consumible( energia = 40, imagen = "bananas.png")
    const banana2 = new Consumible( energia = 40, imagen = "bananas.png")
    const agua1 = new Consumible( energia = 20, imagen = "agua.png")
    const agua2 = new Consumible( energia = 20, imagen = "agua.png")

    const arco1X = game.width() / 2 - 5 // Coordenada x de la portería 1 (izquierda)
    const arco1Y = 0 // Coordenada y de la portería 1
    const arco1Ancho = 10 // Ancho de la portería 1
    const arco1Alto = 10 // Alto de la portería 1

    const arco2X = game.width() / 2 - 5 // Coordenada x de la portería 2 (derecha)
    const arco2Y = game.height() - 10 // Coordenada y de la portería 2
    const arco2Ancho = 10 // Ancho de la portería 2
    const arco2Alto = 10 // Alto de la portería 2

    // Marcadores de goles
    var golesJugador1 = 0
    var golesJugador2 = 0 // Comprobar si la pelota entra en el arco del jugador 1
    const proximidad = 4

 
 // EVENTOS PROGRAMADOS

    game.schedule(100, {
        game.addVisual(jugador1)
        game.addVisual(jugador2)
        game.addVisual(pelota)
        game.addVisual(gaseosa1)
        game.addVisual(gaseosa2)
        game.addVisual(comida)
        game.addVisual(banana1)
        game.addVisual(banana2)
        game.addVisual(agua1)
        game.addVisual(agua2)
        game.say(jugador1, jugador1.decir("Muchaaaaachoooooos"))
        game.say(jugador2, jugador2.decir("Eu nao falo portugues"))
    })

// EVENTOS AUTOMATICOS
    
    //TENEMOS QUE HACER QUE CUANDO PASE CIERTA CANTIDAD DE TICKS EL ITEM REAPAREZCA, Y QUE CON LA COLISION DESAPAREZCA.
    game.onTick(1000, "recupera energia", { jugador1.recuperarEnergia(10) })
    game.onTick(1000, "recupera energia", { jugador2.recuperarEnergia(10) })
    game.onTick(2000, "se mueve", { comida.moverse() })
    game.onTick(5000, "se mueve", { banana1.moverse() })
    game.onTick(5000, "se mueve", { banana2.moverse() })
    game.onTick(8000, "se mueve", { gaseosa1.moverse() })
    game.onTick(8000, "se mueve", { gaseosa2.moverse() })
    game.onTick(10000, "se mueve", { agua1.moverse() })
    game.onTick(10000, "se mueve", { agua2.moverse() })

    
    
    game.onTick(100, "chequeo de colisiones", {
    // Verificamos si el jugador1 está cerca de un consumible y lo recoge
    if ((jugador1.position().x() - gaseosa1.position().x()).abs() < 5 and 
        (jugador1.position().y() - gaseosa1.position().y()).abs() < 5) {
        jugador1.recuperarEnergia(gaseosa1.energia())
        jugador1.decir("RICA GASEOSA")
        game.removeVisual(gaseosa1) // El consumible desaparece visualmente
    }
    if ((jugador1.position().x() - gaseosa2.position().x()).abs() < 5 and 
        (jugador1.position().y() - gaseosa2.position().y()).abs() < 5) {
        jugador1.recuperarEnergia(gaseosa2.energia())
        jugador1.decir("RICA GASEOSA")
        game.removeVisual(gaseosa2) // El consumible desaparece visualmente
    }
    if ((jugador1.position().x() - banana1.position().x()).abs() < 5 and 
        (jugador1.position().y() - banana1.position().y()).abs() < 5) {
        jugador1.recuperarEnergia(banana1.energia())
        game.removeVisual(banana1) // El consumible desaparece visualmente
    }
    if ((jugador1.position().x() - pelota.position().x()).abs() < proximidad &&
        (jugador1.position().y() - pelota.position().y()).abs() < proximidad) {

        // Empuja la pelota en la dirección de movimiento del jugador
        if (jugador1.position().x() < pelota.position().x()) {
            pelota.moverse(pelota.position().x() + 3, pelota.position().y())
        } else if (jugador1.position().x() > pelota.position().x()) {
            pelota.moverse(pelota.position().x() - 3, pelota.position().y())
        }

        if (jugador1.position().y() < pelota.position().y()) {
            pelota.moverse(pelota.position().x(), pelota.position().y() + 3)
        } else if (jugador1.position().y() > pelota.position().y()) {
            pelota.moverse(pelota.position().x(), pelota.position().y() - 3)
        }
    }
    if ((jugador2.position().x() - pelota.position().x()).abs() < proximidad &&
        (jugador2.position().y() - pelota.position().y()).abs() < proximidad) {

        // Empuja la pelota en la dirección de movimiento del jugador
        if (jugador2.position().x() < pelota.position().x()) {
            pelota.moverse(pelota.position().x() + 5, pelota.position().y())
        } else if (jugador2.position().x() > pelota.position().x()) {
            pelota.moverse(pelota.position().x() - 5, pelota.position().y())
        }

        if (jugador2.position().y() < pelota.position().y()) {
            pelota.moverse(pelota.position().x(), pelota.position().y() + 5)
        } else if (jugador2.position().y() > pelota.position().y()) {
            pelota.moverse(pelota.position().x(), pelota.position().y() - 5)
        }
    }
    
    if (pelota.position().x() >= arco1X && pelota.position().x() <= (arco1X + arco1Ancho) &&
        pelota.position().y() >= arco1Y && pelota.position().y() <= (arco1Y + arco1Alto)) {

        golesJugador2 += 1
        game.say(jugador2, "¡Gol para el Jugador 2! Total: " + golesJugador2)
        pelota.moverse(50, 50) // Reiniciar la posición de la pelota
    }

    // Comprobar si la pelota entra en el arco del jugador 2
    if (pelota.position().x() >= arco2X && pelota.position().x() <= (arco2X + arco2Ancho) &&
        pelota.position().y() >= arco2Y && pelota.position().y() <= (arco2Y + arco2Alto)) {

        golesJugador1 += 1
        game.say(jugador1, "¡Gol para el Jugador 1! Total: " + golesJugador1)
        pelota.moverse(50, 50) // Reiniciar la posición de la pelota
    }

    })
    
    game.start()
}
